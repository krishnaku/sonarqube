/*
 * SonarQube
 * Copyright (C) 2009-2016 SonarSource SA
 * mailto:contact AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package org.sonar.api.server.authentication;

import com.google.common.base.Charsets;
import java.io.UnsupportedEncodingException;

import static java.lang.String.format;
import static java.net.URLEncoder.encode;

/**
 * This exception should be used when a functional error is generated by an Identity Provider plugin.
 * The user will be redirected to an unauthorized page and the exception's message will be displayed in the UI.
 *
 * @since 5.5
 */
public class UnauthorizedException extends RuntimeException {

  public static final String UNAUTHORIZED_PATH = "/sessions/unauthorized";
  private static final String UNAUTHORIZED_PATH_WITH_MESSAGE = UNAUTHORIZED_PATH + "?message=%s";

  public UnauthorizedException(String message) {
    super(message);
  }

  public UnauthorizedException(String message, Throwable cause) {
    super(message, cause);
  }

  public String getPath() {
    return format(UNAUTHORIZED_PATH_WITH_MESSAGE, encodeMessage(getMessage()));
  }

  private static String encodeMessage(String message) {
    try {
      return encode(message, Charsets.UTF_8.name());
    } catch (UnsupportedEncodingException unsupportedException) {
      throw new IllegalStateException(format("Fail to encode %s", message), unsupportedException);
    }
  }
}
